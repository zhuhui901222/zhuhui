<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog_zh</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhuhui.club/"/>
  <updated>2020-03-26T16:07:07.464Z</updated>
  <id>http://zhuhui.club/</id>
  
  <author>
    <name>zhuhui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ms</title>
    <link href="http://zhuhui.club/2020/03/27/ms/"/>
    <id>http://zhuhui.club/2020/03/27/ms/</id>
    <published>2020-03-26T16:06:00.000Z</published>
    <updated>2020-03-26T16:07:07.464Z</updated>
    
    <content type="html"><![CDATA[<p>####434 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####434 &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Linux" scheme="http://zhuhui.club/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>ms</title>
    <link href="http://zhuhui.club/2020/03/27/Test%E5%A4%9A%E7%BA%A7/"/>
    <id>http://zhuhui.club/2020/03/27/Test%E5%A4%9A%E7%BA%A7/</id>
    <published>2020-03-26T16:06:00.000Z</published>
    <updated>2020-03-26T18:11:07.018Z</updated>
    
    <content type="html"><![CDATA[<p>####434 dsdsd</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####434 dsdsd&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Diary" scheme="http://zhuhui.club/categories/Diary/"/>
    
      <category term="Life" scheme="http://zhuhui.club/categories/Diary/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>手把手带你入门 Spring Security！</title>
    <link href="http://zhuhui.club/2020/03/03/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E5%85%A5%E9%97%A8-Spring-Security%EF%BC%81/"/>
    <id>http://zhuhui.club/2020/03/03/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E5%85%A5%E9%97%A8-Spring-Security%EF%BC%81/</id>
    <published>2020-03-03T09:11:00.000Z</published>
    <updated>2020-03-26T16:05:27.449Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Security 是 Spring 家族中的一个安全管理框架，实际上，在 Spring Boot 出现之前，Spring Security 就已经发展了多年了，但是使用的并不多，安全管理这个领域，一直是 Shiro 的天下。</p><p>相对于 Shiro，在 SSM/SSH 中整合 Spring Security 都是比较麻烦的操作，所以，Spring Security 虽然功能比 Shiro 强大，但是使用反而没有 Shiro 多（Shiro 虽然功能没有 Spring Security 多，但是对于大部分项目而言，Shiro 也够用了）。</p><p>自从有了 Spring Boot 之后，Spring Boot 对于 Spring Security 提供了 自动化配置方案，可以零配置使用 Spring Security。</p><p>因此，一般来说，常见的安全管理技术栈的组合是这样的：</p><p>SSM + Shiro<br>Spring Boot/Spring Cloud + Spring Security<br>注意，这只是一个推荐的组合而已，如果单纯从技术上来说，无论怎么组合，都是可以运行的。</p><p>我们来看下具体使用。</p><p>1.项目创建<br>在 Spring Boot 中使用 Spring Security 非常容易，引入依赖即可：</p><p>pom.xml 中的 Spring Security 依赖：</p><dependency>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-starter-security</artifactId></dependency>只要加入依赖，项目的所有接口都会被自动保护起来。<p>2.初次体验<br>我们创建一个 HelloController:</p><p>@RestController<br>public class HelloController {<br>    @GetMapping(“/hello”)<br>    public String hello() {<br>        return “hello”;<br>    }<br>}<br>访问 /hello ，需要登录之后才能访问。</p><p>当用户从浏览器发送请求访问 /hello 接口时，服务端会返回 302 响应码，让客户端重定向到 /login 页面，用户在 /login 页面登录，登陆成功之后，就会自动跳转到 /hello 接口。</p><p>另外，也可以使用 POSTMAN 来发送请求，使用 POSTMAN 发送请求时，可以将用户信息放在请求头中（这样可以避免重定向到登录页面）：</p><p>通过以上两种不同的登录方式，可以看出，Spring Security 支持两种不同的认证方式：</p><p>可以通过 form 表单来认证<br>可以通过 HttpBasic 来认证<br>3.用户名配置<br>默认情况下，登录的用户名是 user ，密码则是项目启动时随机生成的字符串，可以从启动的控制台日志中看到默认密码：</p><p>这个随机生成的密码，每次启动时都会变。对登录的用户名/密码进行配置，有三种不同的方式：</p><p>在 application.properties 中进行配置<br>通过 Java 代码配置在内存中<br>通过 Java 从数据库中加载<br>前两种比较简单，第三种代码量略大，本文就先来看看前两种，第三种后面再单独写文章介绍，也可以参考我的微人事项目。</p><p>3.1 配置文件配置用户名/密码<br>可以直接在 application.properties 文件中配置用户的基本信息：</p><p>spring.security.user.name=javaboy<br>spring.security.user.password=123<br>配置完成后，重启项目，就可以使用这里配置的用户名/密码登录了。</p><p>3.2 Java 配置用户名/密码<br>也可以在 Java 代码中配置用户名密码，首先需要我们创建一个 Spring Security 的配置类，集成自 WebSecurityConfigurerAdapter 类，如下：</p><p>@Configuration<br>public class SecurityConfig extends WebSecurityConfigurerAdapter {<br>    @Override<br>    protected void configure(AuthenticationManagerBuilder auth) throws Exception {<br>        //下面这两行配置表示在内存中配置了两个用户<br>        auth.inMemoryAuthentication()<br>                .withUser(“javaboy”).roles(“admin”).password(“$2a$10$OR3VSksVAmCzc.7WeaRPR.t0wyCsIj24k0Bne8iKWV1o.V9wsP8Xe”)<br>                .and()<br>                .withUser(“lisi”).roles(“user”).password(“$2a$10$p1H8iWa8I4.CA.7Z8bwLjes91ZpY.rYREGHQEInNtAp4NzL6PLKxi”);<br>    }<br>    @Bean<br>    PasswordEncoder passwordEncoder() {<br>        return new BCryptPasswordEncoder();<br>    }<br>}<br>这里我们在 configure 方法中配置了两个用户，用户的密码都是加密之后的字符串(明文是 123)，从 Spring5 开始，强制要求密码要加密，如果非不想加密，可以使用一个过期的 PasswordEncoder 的实例 NoOpPasswordEncoder，但是不建议这么做，毕竟不安全。</p><p>Spring Security 中提供了 BCryptPasswordEncoder 密码编码工具，可以非常方便的实现密码的加密加盐，相同明文加密出来的结果总是不同，这样就不需要用户去额外保存盐的字段了，这一点比 Shiro 要方便很多。</p><p>4.登录配置<br>对于登录接口，登录成功后的响应，登录失败后的响应，我们都可以在 WebSecurityConfigurerAdapter 的实现类中进行配置。例如下面这样：</p><p>@Configuration<br>public class SecurityConfig extends WebSecurityConfigurerAdapter {<br>    @Autowired<br>    VerifyCodeFilter verifyCodeFilter;<br>    @Override<br>    protected void configure(HttpSecurity http) throws Exception {<br>        http.addFilterBefore(verifyCodeFilter, UsernamePasswordAuthenticationFilter.class);<br>        http<br>        .authorizeRequests()//开启登录配置<br>        .antMatchers(“/hello”).hasRole(“admin”)//表示访问 /hello 这个接口，需要具备 admin 这个角色<br>        .anyRequest().authenticated()//表示剩余的其他接口，登录之后就能访问<br>        .and()<br>        .formLogin()<br>        //定义登录页面，未登录时，访问一个需要登录之后才能访问的接口，会自动跳转到该页面<br>        .loginPage(“/login_p”)<br>        //登录处理接口<br>        .loginProcessingUrl(“/doLogin”)<br>        //定义登录时，用户名的 key，默认为 username<br>        .usernameParameter(“uname”)<br>        //定义登录时，用户密码的 key，默认为 password<br>        .passwordParameter(“passwd”)<br>        //登录成功的处理器<br>        .successHandler(new AuthenticationSuccessHandler() {<br>            @Override<br>            public void onAuthenticationSuccess(HttpServletRequest req, HttpServletResponse resp, Authentication authentication) throws IOException, ServletException {<br>                    resp.setContentType(“application/json;charset=utf-8”);<br>                    PrintWriter out = resp.getWriter();<br>                    out.write(“success”);<br>                    out.flush();<br>                }<br>            })<br>            .failureHandler(new AuthenticationFailureHandler() {<br>                @Override<br>                public void onAuthenticationFailure(HttpServletRequest req, HttpServletResponse resp, AuthenticationException exception) throws IOException, ServletException {<br>                    resp.setContentType(“application/json;charset=utf-8”);<br>                    PrintWriter out = resp.getWriter();<br>                    out.write(“fail”);<br>                    out.flush();<br>                }<br>            })<br>            .permitAll()//和表单登录相关的接口统统都直接通过<br>            .and()<br>            .logout()<br>            .logoutUrl(“/logout”)<br>            .logoutSuccessHandler(new LogoutSuccessHandler() {<br>                @Override<br>                public void onLogoutSuccess(HttpServletRequest req, HttpServletResponse resp, Authentication authentication) throws IOException, ServletException {<br>                    resp.setContentType(“application/json;charset=utf-8”);<br>                    PrintWriter out = resp.getWriter();<br>                    out.write(“logout success”);<br>                    out.flush();<br>                }<br>            })<br>            .permitAll()<br>            .and()<br>            .httpBasic()<br>            .and()<br>            .csrf().disable();<br>    }<br>}<br>我们可以在 successHandler 方法中，配置登录成功的回调，如果是前后端分离开发的话，登录成功后返回 JSON 即可，同理，failureHandler 方法中配置登录失败的回调，logoutSuccessHandler 中则配置注销成功的回调。</p><p>5.忽略拦截<br>如果某一个请求地址不需要拦截的话，有两种方式实现：</p><p>设置该地址匿名访问<br>直接过滤掉该地址，即该地址不走 Spring Security 过滤器链<br>推荐使用第二种方案，配置如下：</p><p>@Configuration<br>public class SecurityConfig extends WebSecurityConfigurerAdapter {<br>    @Override<br>    public void configure(WebSecurity web) throws Exception {<br>        web.ignoring().antMatchers(“/vercode”);<br>    }<br>}<br>Spring Security 另外一个强大之处就是它可以结合 OAuth2 ，玩出更多的花样出来，这些我们在后面的文章中再和大家细细介绍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring Security 是 Spring 家族中的一个安全管理框架，实际上，在 Spring Boot 出现之前，Spring Security 就已经发展了多年了，但是使用的并不多，安全管理这个领域，一直是 Shiro 的天下。&lt;/p&gt;
&lt;p&gt;相对于 Shiro，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>关于JAVA异常处理的20个最佳实践</title>
    <link href="http://zhuhui.club/2020/02/29/%E5%85%B3%E4%BA%8EJAVA%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%8420%E4%B8%AA%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://zhuhui.club/2020/02/29/%E5%85%B3%E4%BA%8EJAVA%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%8420%E4%B8%AA%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</id>
    <published>2020-02-29T06:26:00.000Z</published>
    <updated>2020-02-29T06:28:22.433Z</updated>
    
    <content type="html"><![CDATA[<p>异常类型<br>这里写图片描述<br>检查性异常(checked exceptions) 是必须在在方法的throws子句中声明的异常。它们扩展了异常，旨在成为一种“在你面前”的异常类型。JAVA希望你能够处理它们，因为它们以某种方式依赖于程序之外的外部因素。检查的异常表示在正常系统操作期间可能发生的预期问题。## 标题 ## 当你尝试通过网络或文件系统使用外部系统时，通常会发生这些异常。 大多数情况下，对检查性异常的正确响应应该是稍后重试，或者提示用户修改其输入。<br>非检查性异常(unchecked Exceptions) 是不需要在throws子句中声明的异常。 由于程序错误，JVM并不会强制你处理它们，因为它们大多数是在运行时生成的。 它们扩展了RuntimeException。 最常见的例子是NullPointerException [相当可怕..是不是？]。 未经检查的异常可能不应该重试，正确的操作通常应该是什么都不做，并让它从你的方法和执行堆栈中出来。 在高层次的执行中，应该记录这种类型的异常。<br>错误(errors) 是严重的运行时环境问题，几乎肯定无法恢复。 一些示例是OutOfMemoryError，LinkageError和StackOverflowError。 它们通常会让程序崩溃或程序的一部分。 只有良好的日志练习才能帮助你确定错误的确切原因。</p><p>用户自定义异常<br>任何时候，当用户觉得他出于某种原因想要使用自己的特定于应用程序的异常时，他可以创建一个新的类来适当的扩展超类（主要是它的Exception.java）并开始在适当的地方使用它。 这些用户定义的异常可以以两种方式使用： </p><p>1) 当应用程序出现问题时，直接抛出自定义异常</p><p>throw new DaoObjectNotFoundException(“Couldn’t find dao with id “ + id);<br>1<br>2) 或者将自定义异常中的原始异常包装并抛出</p><p>catch (NoSuchMethodException e) {<br>  throw new DaoObjectNotFoundException(“Couldn’t find dao with id “ + id, e);<br>}<br>1<br>2<br>3<br>包装异常可以通过添加自己的消息/上下文信息来为用户提供额外信息，同时仍保留原始异常的堆栈跟踪和消息。 它还允许你隐藏代码的实现细节，这是封装异常的最重要原因。</p><p>现在让我们开始探索遵循行业聪明的异常处理的最佳实践。</p><p>你必须考虑并遵循的最佳做法</p><p>1) 永远不要吞下catch块中的异常<br>catch (NoSuchMethodException e) {<br>   return null;<br>}<br>1<br>2<br>3<br>2) 在你的方法里抛出定义具体的检查性异常<br>public void foo() throws Exception { //错误方式<br>}<br>1<br>2<br>一定要避免出现上面的代码示例。 它简单地破坏了检查性异常的整个目的。 声明你的方法可能抛出的具体检查性异常。 如果只有太多这样的检查性异常，你应该把它们包装在你自己的异常中，并在异常消息中添加信息。 如果可能的话，你也可以考虑代码重构。</p><p>public void foo() throws SpecificException1, SpecificException2 { //正确方式<br>}<br>1<br>2<br>3) 捕获具体的子类而不是捕获Exception类<br>try {<br>   someMethod();<br>} catch (Exception e) { //错误方式<br>   LOGGER.error(“method has failed”, e);<br>}<br>1<br>2<br>3<br>4<br>5<br>捕获异常的问题是，如果稍后调用的方法为其方法声明添加了新的检查性异常，则开发人员的意图是应该处理具体的新异常。 如果你的代码只是捕获异常（或Throwable），你永远不会知道这个变化，以及你的代码现在是错误的，并且可能会在运行时的任何时候中断。</p><p>4) 永远不要捕获Throwable类<br>这是一个更严重的麻烦。 因为java错误也是Throwable的子类。 错误是JVM本身无法处理的不可逆转的条件。 对于某些JVM的实现，JVM可能实际上甚至不会在错误上调用catch子句。</p><p>5) 始终正确包装自定义异常中的异常，以便堆栈跟踪不会丢失<br>catch (NoSuchMethodException e) {<br>   throw new MyServiceException(“Some information: “ + e.getMessage());  //错误方式<br>}<br>1<br>2<br>3<br>这破坏了原始异常的堆栈跟踪，并且始终是错误的。 正确的做法是：</p><p>catch (NoSuchMethodException e) {<br>   throw new MyServiceException(“Some information: “ , e);  //正确方式<br>}<br>1<br>2<br>3<br>6) 要么记录异常要么抛出异常，但不要一起执行<br>catch (NoSuchMethodException e) {<br>//错误方式<br>   LOGGER.error(“Some information”, e);<br>   throw e;<br>}<br>1<br>2<br>3<br>4<br>5<br>正如在上面的示例代码中，记录和抛出异常会在日志文件中产生多条日志消息，代码中存在单个问题，并且让尝试挖掘日志的工程师生活得很糟糕。</p><p>7) finally块中永远不要抛出任何异常<br>try {<br>  someMethod();  //Throws exceptionOne<br>} finally {<br>  cleanUp();    //如果finally还抛出异常，那么exceptionOne将永远丢失<br>}<br>1<br>2<br>3<br>4<br>5<br>只要cleanUp()永远不会抛出任何异常，上面的代码没有问题。 但是如果someMethod()抛出一个异常，并且在finally块中，cleanUp()也抛出另一个异常，那么程序只会把第二个异常抛出来，原来的第一个异常（正确的原因）将永远丢失。 如果你在finally块中调用的代码可能会引发异常，请确保你要么处理它，要么将其记录下来。 永远不要让它从finally块中抛出来。</p><p>8) 始终只捕获实际可处理的异常<br>catch (NoSuchMethodException e) {<br>   throw e; //避免这种情况，因为它没有任何帮助<br>}<br>1<br>2<br>3<br>这是最重要的概念。 不要为了捕捉异常而捕捉，只有在想要处理异常时才捕捉异常，或者希望在该异常中提供其他上下文信息。 如果你不能在catch块中处理它，那么最好的建议就是不要只为了重新抛出它而捕获它。</p><p>9) 不要使用printStackTrace()语句或类似的方法<br>完成代码后，切勿忽略printStackTrace()。 你的同事可能会最终得到这些堆栈，并且对于如何处理它完全没有任何知识，因为它不会附加任何上下文信息。</p><p>10) 如果你不打算处理异常，请使用finally块而不是catch块<br>try {<br>  someMethod();  //Method 2<br>} finally {<br>  cleanUp();    //do cleanup here<br>}<br>1<br>2<br>3<br>4<br>5<br>这也是一个很好的做法。 如果在你的方法中你正在访问Method 2，而Method 2抛出一些你不想在method 1中处理的异常，但是仍然希望在发生异常时进行一些清理，然后在finally块中进行清理。 不要使用catch块。</p><p>11) 记住“早throw晚catch”原则<br>这可能是关于异常处理最著名的原则。 它基本上说，你应该尽快抛出(throw)异常，并尽可能晚地捕获(catch)它。 你应该等到你有足够的信息来妥善处理它。</p><p>这个原则隐含地说，你将更有可能把它放在低级方法中，在那里你将检查单个值是否为空或不适合。 而且你会让异常堆栈跟踪上升好几个级别，直到达到足够的抽象级别才能处理问题。</p><p>12) 清理总是在处理异常之后<br>如果你正在使用数据库连接或网络连接等资源，请确保清除它们。 如果你正在调用的API仅使用非检查性异常，则仍应使用try-finally块来清理资源。 在try模块里面访问资源，在finally里面最后关闭资源。 即使在访问资源时发生任何异常，资源也会优雅地关闭。</p><p>13) 只从方法中抛出相关异常<br>相关性对于保持应用程序清洁非常重要。 一种尝试读取文件的方法; 如果抛出NullPointerException，那么它不会给用户任何相关的信息。 相反，如果这种异常被包裹在自定义异常中，则会更好。 NoSuchFileFoundException则对该方法的用户更有用。</p><p>14) 切勿在程序中使用流程控制异常<br>我们已经阅读过很多次，但有时我们还是会在项目中看到开发人员尝试为应用程序逻辑而使用异常的代码。 永远不要这样做。 它使代码很难阅读，理解和丑陋。</p><p>15) 验证用户输入以在请求处理的早期捕获不利条件<br>始终要在非常早的阶段验证用户输入，甚至在达到实际controller之前。 它将帮助你把核心应用程序逻辑中的异常处理代码量降到最低。 如果用户输入出现错误，它还可以帮助你使与应用程序保持一致。</p><p>例如：如果在用户注册应用程序中，你遵循以下逻辑：</p><p>1）验证用户<br>2）插入用户<br>3）验证地址<br>4）插入地址<br>5）如果出问题回滚一切</p><p>这是非常不正确的做法。 它会使数据库在各种情况下处于不一致的状态。 首先验证所有内容，然后将用户数据置于dao层并进行数据库更新。 正确的做法是：</p><p>1）验证用户<br>2）验证地址<br>3）插入用户<br>4）插入地址<br>5）如果问题回滚一切</p><p>16) 一个异常只能包含在一个日志中<br>LOGGER.debug(“Using cache sector A”);<br>LOGGER.debug(“Using retry sector B”);<br>1<br>2<br>不要这样做。</p><p>对多个LOGGER.debug()调用使用多行日志消息可能在你的测试用例中看起来不错，但是当它在具有400个并行运行的线程的应用程序服务器的日志文件中显示时，所有转储信息都是相同的日志文件，你的两个日志消息最终可能会在日志文件中间隔1000行，即使它们出现在代码的后续行中。</p><p>像这样做：</p><p>LOGGER.debug(“Using cache sector A, using retry sector B”);<br>1<br>17) 将所有相关信息尽可能地传递给异常<br>有用且信息丰富的异常消息和堆栈跟踪也非常重要。 如果你的日志不能确定任何事情（有效内容不全或很难确定问题原因），<br>那要日志有什么用？ 这类的日志只是你代码中的装饰品。</p><p>18) 终止掉被中断线程<br>while (true) {<br>  try {<br>    Thread.sleep(100000);<br>  } catch (InterruptedException e) {} //别这样做<br>  doSomethingCool();<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>InterruptedException是你的代码的一个提示，它应该停止它正在做的事情。 线程中断的一些常见用例是active事务超时或线程池关闭。 你的代码应该尽最大努力完成它正在做的事情，并且完成当前的执行线程，而不是忽略InterruptedException。 所以要纠正上面的例子：</p><p>while (true) {<br>  try {<br>    Thread.sleep(100000);<br>  } catch (InterruptedException e) {<br>    break;<br>  }<br>}<br>doSomethingCool();<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>19) 使用模板方法重复try-catch<br>在你的代码中有100个类似的catch块是没有用的。 它增加代码的重复性而且没有任何的帮助。 对这种情况要使用模板方法。</p><p>例如，下面的代码尝试关闭数据库连接。</p><p>class DBUtil{<br>    public static void closeConnection(Connection conn){<br>        try{<br>            conn.close();<br>        } catch(Exception ex){<br>            //Log Exception - Cannot close connection<br>        }<br>    }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>这种类型的方法将在你的应用程序的成千上万个地方使用。 不要把这块代码放的到处都是，而是定义顶层的方法，并在下层的任何地方使用它：</p><p>public void dataAccessCode() {<br>    Connection conn = null;<br>    try{<br>        conn = getConnection();<br>        ….<br>    } finally{<br>        DBUtil.closeConnection(conn);<br>    }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>20) 在JavaDoc中记录应用程序中的所有异常<br>把注释(javadoc)运行时可能抛出的所有异常作为一种习惯。<br>也要尽可能包括可行的方案，用户应该关注这些异常发生的情况。</p><p>这就是我现在所想的。 如果你发现任何遗漏或你与我的观点不一致，请发表评论。 我会很乐意讨论。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;异常类型&lt;br&gt;这里写图片描述&lt;br&gt;检查性异常(checked exceptions) 是必须在在方法的throws子句中声明的异常。它们扩展了异常，旨在成为一种“在你面前”的异常类型。JAVA希望你能够处理它们，因为它们以某种方式依赖于程序之外的外部因素。检查的异常表示
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>线程池大小设置，CPU的核心数、线程数的关系和区别，同步与堵塞完全是两码事</title>
    <link href="http://zhuhui.club/2020/02/29/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE%EF%BC%8CCPU%E7%9A%84%E6%A0%B8%E5%BF%83%E6%95%B0%E3%80%81%E7%BA%BF%E7%A8%8B%E6%95%B0%E7%9A%84%E5%85%B3%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB%EF%BC%8C%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%A0%B5%E5%A1%9E%E5%AE%8C%E5%85%A8%E6%98%AF%E4%B8%A4%E7%A0%81%E4%BA%8B/"/>
    <id>http://zhuhui.club/2020/02/29/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE%EF%BC%8CCPU%E7%9A%84%E6%A0%B8%E5%BF%83%E6%95%B0%E3%80%81%E7%BA%BF%E7%A8%8B%E6%95%B0%E7%9A%84%E5%85%B3%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB%EF%BC%8C%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%A0%B5%E5%A1%9E%E5%AE%8C%E5%85%A8%E6%98%AF%E4%B8%A4%E7%A0%81%E4%BA%8B/</id>
    <published>2020-02-29T06:26:00.000Z</published>
    <updated>2020-03-26T16:22:22.374Z</updated>
    
    <content type="html"><![CDATA[<p>线程池应该设置多少线程合适，怎么样估算出来。最近接触到一些相关资料，现作如下总结。</p><p>最开始接触线程池的时候，没有想到就仅仅是设置一个线程池的大小居然还有这么多的学问，汗颜啊。</p><p>首先，需要考虑到线程池所进行的工作的性质：</p><ul><li>IO密集型</li><li>CPU密集型</li></ul><p>简单的分析来看，如果是CPU密集型的任务，我们应该设置数目较小的线程数，比如CPU数目加1。如果是IO密集型的任务，则应该设置可能多的线程数，由于IO操作不占用CPU，所以，不能让CPU闲下来。当然，如果线程数目太多，那么线程切换所带来的开销又会对系统的响应时间带来影响。</p><p>在<a href="https://www.baidu.com/s?wd=《linux多线程服务器端编程》&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">《linux多线程服务器端编程》</a>中有一个思路，CPU计算和IO的阻抗匹配原则。</p><p>如果线程池中的线程在执行任务时，密集<a href="https://www.baidu.com/s?wd=计算所&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">计算所</a>占的时间比重为P(0&lt;P&lt;=1)，而系统一共有C个CPU，为了让CPU跑满而又不过载，线程池的大小经验公式 T = C / P。在此，T只是一个参考，考虑到P的估计并不是很准确，T的最佳估值可以<a href="https://www.baidu.com/s?wd=上下浮动&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">上下浮动</a>50%。</p><p>这个经验公式的原理很简单，T个线程，每个线程占用P的CPU时间，如果刚好占满C个CPU,那么必有 T * P = C。</p><p>下面验证一下边界条件的正确性：</p><p>假设C = 8，P = 1.0，线程池的任务完全是密集计算，那么T = 8。只要8个活动线程就能让8个CPU饱和，再多也没用了，因为CPU资源已经耗光了。</p><p>假设C = 8，P = 0.5，线程池的任务有一半是计算，有一半在等IO上，那么T = 16.考虑操作系统能灵活，合理调度sleeping/writing/running线程，那么大概16个“50%繁忙的线程”能让8个CPU忙个不停。启动更多的线程并不能提高吞吐量，反而因为增加<a href="https://www.baidu.com/s?wd=上下文切换&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">上下文切换</a>的开销而降低性能。</p><p>如果P &lt; 0.2，这个公式就不适用了，T可以取一个固定值，比如 5*C。另外公式里的C不一定是CPU总数，可以是“分配给这项任务的CPU数目”，比如在8核机器上分出4个核来做一项任务，那么C=4</p><p>文章<a href="http://blog.csdn.net/u011519624/article/details/69263460" target="_blank" rel="noopener">如何合理设置线程池大小</a>里面提到了一个公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最佳线程数目 &#x3D; （（线程等待时间+线程CPU时间）&#x2F;线程CPU时间 ）* CPU数目</span><br></pre></td></tr></table></figure><p>比如平均每个线程CPU运行时间为0.5s，而线程等待时间（非CPU运行时间，比如IO）为1.5s，<a href="https://www.baidu.com/s?wd=CPU核心&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">CPU核心</a>数为8，那么根据上面这个公式估算得到：((0.5+1.5)/0.5)*8=32。这个公式进一步转化为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最佳线程数目 &#x3D; （线程等待时间与线程CPU时间之比 + 1）* CPU数目</span><br></pre></td></tr></table></figure><p>可以得出一个结论：<br>线程等待时间所占比例越高，需要越多线程。线程CPU时间所占比例越高，需要越少线程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;线程池应该设置多少线程合适，怎么样估算出来。最近接触到一些相关资料，现作如下总结。&lt;/p&gt;
&lt;p&gt;最开始接触线程池的时候，没有想到就仅仅是设置一个线程池的大小居然还有这么多的学问，汗颜啊。&lt;/p&gt;
&lt;p&gt;首先，需要考虑到线程池所进行的工作的性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://zhuhui.club/categories/Java/"/>
    
    
      <category term="线程" scheme="http://zhuhui.club/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 序列化 之 Serializable</title>
    <link href="http://zhuhui.club/2020/02/24/121233/"/>
    <id>http://zhuhui.club/2020/02/24/121233/</id>
    <published>2020-02-24T06:24:00.000Z</published>
    <updated>2020-02-24T07:12:30.550Z</updated>
    
    <content type="html"><![CDATA[<p>概念<br>序列化：就是把对象转化成字节。<br>反序列化：把字节数据转换成对象。</p><p>对象序列化场景：<br>1、对象网络传输<br>例如：在微服务系统中或给第三方提供接口调用时，使用rpc进行调用，一般会把对象转化成字节序列，才能在网络上传输；接收方则需要把字节序列再转化为java对象。</p><p>2、对象保存至文件中<br>例如：hibernate中的二级缓存：把从数据库中查询出的对象，序列化转存到硬盘中，下次读取的时候，首先从内存中找是否有该对象，如果没有在去二级缓存（硬盘）中去查找。减少数据库的查询次数，提升性能。</p><p>3、tomcat的钝化和活化</p><p>tomcat 的session 钝化和活化之 StandarManager ：<br>当Tomcat服务器关闭或者重启时tomcat服务器会将当前内存中的session对象钝化到服务器文件系统中；<br>另一种情况是web应用程序被重新加载时(其实原理也是重启tomcat)，内存中的session对象也会被钝化到服务器的文件系统中<br>当系统启动时，会把序列化到硬盘上session重新加载到内存中来。这样用户还保持这登录状态，提供系统的可用性。<br>这样，tomcat重启，如果用户在tomcat重启之前登录过，然后在tomcat重启后可以不需要登录（前提是session没过期前，默认是30分钟过期）。</p><p>tomcat 的session 钝化和活化之 Persistentmanager：<br>当网站有大量用户访问的时候，服务器会创建大量的session，会占用大量的服务器内存资源，当用户开着浏览器一分钟不操作页面的话建议将session钝化，将session生成文件放在tomcat工作目录下。</p><p>可参考 : Tomcat 之 Session的活化和钝化 源码分析</p><ol><li>java 序列化 Serializable<br>java 中只要对象实现了 java.io.Serializable 就可以进行序列化。</li></ol><p>public class User implements Serializable {<br>    private String userName;<br>    private String password;<br>    private String addr;</p><pre><code>public String getUserName() {    return userName;}public void setUserName(String userName) {    this.userName = userName;}public String getPassword() {    return password;}public void setPassword(String password) {    this.password = password;}public String getAddr() {    return addr;}public void setAddr(String addr) {    this.addr = addr;}@Overridepublic String toString() {    return &quot;User [userName=&quot; + userName + &quot;, password=&quot; + password + &quot;, addr=&quot; + addr + &quot;]&quot;;}</code></pre><p>}<br>该 User 类实现了 Serializable 接口，那么该类应该怎么序列化和发序列化呢？</p><ol start="2"><li>ObjectInputStream 和 ObjectOutputStream<br>Java IO 包中为我们提供了 ObjectInputStream 和 ObjectOutputStream 两个类。<br>java.io.ObjectOutputStream 类实现类的序列化功能。<br>java.io.ObjectInputStream 类实现了反序列化功能。</li></ol><p>示例如下：</p><p>public class Test{<br>    public static void main(String[] args) throws Exception {<br>        File file = new File(“d:\a.user”);<br>        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file));<br>        User user1 = new User();<br>        user1.setUserName(“zhangsan”);<br>        user1.setPassword(“123456”);<br>        user1.setAddr(“北京中关村”);<br>        oos.writeObject(user1);</p><pre><code>    ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file));    User user2 = (User)ois.readObject();    System.out.println(user2);}</code></pre><p>}<br>输出结果：<br>User [userName=zhangsan, password=123456, addr=北京中关村]</p><p>使用 ObjectOutputStream 把 user1 实例序列化到 d:\user 文件中。<br>使用 ObjectInputStream 把 d:\user 文件中的数据反序列化成 user2 实，并打印。<br>如果考虑安全问题，我们不想把密码序列化进行保存，那么该怎么做呢？</p><ol start="3"><li>transient关键字<br>当某个字段被声明为transient后，默认序列化机制就会忽略该字段。此处将User类中的password字段声明为transient，如下所示，</li></ol><p>public class User implements Serializable {<br>    private String userName;<br>    private transient String password;<br>    private String addr;<br>    … …<br>然后在执行Test类的 main 方法，执行结果如下：</p><p>输出结果：<br>User [userName=zhangsan, password=null, addr=北京中关村]</p><p>当我们把 User 对象序列化保存到文件中，这时 User 类结构添加了一个新字段，那么它能成功反序列化吗？</p><p>serialVersionUID的作用<br>User 类中添加一个新属性 email 字段，如下图：</p><p>然后再执行反序列化</p><p>执行结果如下：</p><p>Exception in thread “main” java.io.InvalidClassException: cn.com.infcn.serial.User; local class incompatible: stream classdesc serialVersionUID = 1318824539146791009, local class serialVersionUID = 7884536922902331245</p><p>执行反序列化报 java.io.InvalidClassException 异常。这是由于 User 类修改了，<br>也就是修改过后的class，不兼容了，处于安全机制考虑，程序抛出了错误，并且拒绝载入。从异常信息中可以看出，它是根据 serialVersionUID 值进行判断类是否修改过。</p><p>如果在添加新字段 email 后，还可以继续加载之前的字段怎么办呢？<br>我们可以在类中添加 serialVersionUID 属性字段。</p><p>serialVersionUID 的值和报错中的 “stream classdesc serialVersionUID” 的值一样就可以反序列化了。</p><p>如果类中没有显示的声明 serialVersionUID 属性，那么java编译器会自动为我们生成一个 serialVersionUID （应该是根据 属性和方法进行摘要算出来的，方法里面内容变动 serialVersionUID 的值不会改变。）</p><p>如果 User 对象升级版本，修改了结构，而且不想兼容之前的版本，那么只需要修改下 serialVersionUID 的值就可以了。</p><p>建议，每个需要序列化的对象，都要添加一个 serialVersionUID 字段。</p><p>如果需要把设置的 transient 的字段也需要序列化和发序列化，我们应该怎么办？我们需要对密码加密序列化，反序列化后解密处理，又应该怎么做？</p><p>readObject 和 writeObject</p><p>crypto 方法，实现加解密功能。<br>    /**<br>     * 简单加密加密解密字符串 加密解密思路：先将字符串变成byte数组，再将数组每位与key做位运算，得到新的数组就是加密或解密后的byte数组.<br>     * 知识：^ 是java位运算，可以百度了解下，a = b ^ skey 反之也成立，即b = a ^ skey<br>     *<br>     * @param str 解密/加密 字符串<br>     * @return<br>     * @throws Exception<br>     */<br>    static String crypto(String str) {<br>        try {<br>            byte skey = (byte) 88; //密钥<br>            byte[] bytes = str.getBytes(“GBK”);</p><pre><code>        for (int i = 0; i &lt; bytes.length; i++) {            bytes[i] = (byte) (bytes[i] ^ skey);        }        return new String(bytes, &quot;GBK&quot;);    } catch (Exception ex) {        ex.printStackTrace();    }    return null;}</code></pre><p>我们只需要在当前 User 类中添加 readObject() 和 writeObject() 方法，在 writeObject 方法中实现对 password 的字段加密，在 readObject 方法中实现对 password 字段解密，并赋值给 User 对象即可。</p><p>readObject() 和 writeObject() 可以实现对 transient 和 非transient字段进行序列化。</p><p>ArrayList 序列化源码分析<br>我们知道，ArrayList 是通过数组进行存储数据的，当数组中元素达到数组的最大容量时，会自动生成一个更大的数组，并复制到更大的数组中。</p><p>打开ArrayList 源码，我们可以知道，数据是存储在 Object[] elementData 数组中。<br>该属性是 transient 关键字修饰的，通过上面代码可以知道，用 transient 关键字修饰的字段，默认是不能被序列化的。ArrayList 如果要实现序列化，那么就必须通过 readObject() 和 writeObject() 方法去实现序列化，那么他这是多此一举吗？</p><p>writeObject() 方法</p><p>通过源码，我们可以看到，ArrayList 序列化数组元素时做了优化。<br>因为 ArrayList 的 elementData 数组大小，不是ArrayList 的实际容量，这里只把实际存储在 elementData中的数据，进行序列化。这样减少了序列化的流大小。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;概念&lt;br&gt;序列化：就是把对象转化成字节。&lt;br&gt;反序列化：把字节数据转换成对象。&lt;/p&gt;
&lt;p&gt;对象序列化场景：&lt;br&gt;1、对象网络传输&lt;br&gt;例如：在微服务系统中或给第三方提供接口调用时，使用rpc进行调用，一般会把对象转化成字节序列，才能在网络上传输；接收方则需要把字
      
    
    </summary>
    
    
      <category term="Java" scheme="http://zhuhui.club/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zhuhui.club/2020/02/24/hello-world/"/>
    <id>http://zhuhui.club/2020/02/24/hello-world/</id>
    <published>2020-02-24T02:18:48.789Z</published>
    <updated>2020-02-24T02:18:48.789Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
